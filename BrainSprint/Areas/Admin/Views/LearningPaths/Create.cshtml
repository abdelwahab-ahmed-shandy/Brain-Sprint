@model ContentManagementCreateVM.LearningPathsCreateVM
@{
    ViewData["Title"] = "Create a New Learning Path";
}

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mt-4">@ViewData["Title"]</h1>
        <a asp-action="Index" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-1"></i> Back to List
        </a>
    </div>

    @if (TempData["notification"] != null)
    {
        <div class="alert alert-@TempData["MessageType"] alert-dismissible fade show mb-4">
            @TempData["notification"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <i class="fas fa-plus-circle me-1"></i>
            Add New Learning Path Details
        </div>
        <div class="card-body">
            <form asp-action="Create" method="post" enctype="multipart/form-data" class="needs-validation" novalidate>
                <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                <div class="row mb-3">
                    <div class="col-md-6 mb-3 mb-md-0">
                        <div class="form-group">
                            <label asp-for="Name" class="form-label">Path Name *</label>
                            <input asp-for="Name" class="form-control" required />
                            <span asp-validation-for="Name" class="text-danger small"></span>
                        </div>
                    </div>

                   
                </div>

                <div class="form-group mb-4">
                    <label asp-for="Description" class="form-label">Description *</label>
                    <textarea asp-for="Description" class="form-control" rows="4" required></textarea>
                    <span asp-validation-for="Description" class="text-danger small"></span>
                </div>

                <div class="form-group mb-4">
                    <label class="form-label">Or Upload Icon File</label>
                    <input type="file" name="icon" class="form-control" accept=".jpg,.jpeg,.png,.svg" />
                    <small class="form-text text-muted">Allowed formats: JPG, PNG, SVG (Max 2MB)</small>
                    @if (ViewData.ModelState["icon"]?.Errors.Count > 0)
                    {
                        <span class="text-danger small">@ViewData.ModelState["icon"].Errors.First().ErrorMessage</span>
                    }
                </div>

                <div class="d-flex justify-content-end gap-2 mt-4">
                    <button type="reset" class="btn btn-outline-secondary">
                        <i class="fas fa-undo me-1"></i> Reset
                    </button>
                    <button type="submit" class="btn btn-primary px-4">
                        <i class="fas fa-save me-1"></i> Create Path
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        <script>
            // Enable client-side validation
            (() => {
                'use strict'
                const forms = document.querySelectorAll('.needs-validation')

                Array.from(forms).forEach(form => {
                    form.addEventListener('submit', event => {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }

                        form.classList.add('was-validated')
                    }, false)
                })
            })()

            // Image file size validation
            document.querySelector('input[name="icon"]').addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file && file.size > 2 * 1024 * 1024) {
                    alert('File size exceeds 2MB limit');
                    e.target.value = '';
                }
            });
        </script>
    }
}